#ifndef VANILLA_FUNCTIONS
#define VANILLA_FUNCTIONS

#include "types.h"

void* int_to_str(void* buffer, s32 num, u8 format, u8 max_digits);
void* u_int_to_str(void* buffer, u32 num, u8 format, u8 max_digits);
u8 get_item_battle_function(u16 item_id);
u8 get_item_quality(u16 item_id);
void execute_battle_script(void* ptr_to_battlescript);
void record_usage_of_ability(u8 bank, u8 ability);
u8 castform_switch(u8 bank);
u8 is_bank_from_opponent_side(u8 bank);
void* display_string_in_battle(void*);
u32 read_word(void*);
u16 rng();
u8 calc_total_move_pp(u16 move_id, u8 pp_bonus, u8 moveset_slot);
void damage_modulate_by_type_effectivity(u8 effect);
void prepare_status_animation(u8 buffer, u8 unkown, u32 status);
void mark_buffer_bank_for_execution(u8 bank);
u8 get_item_pocket_id(u16 itemID);
void* strcpy_xFF_terminated_0(void* destination, void* text_to_copy);
void prepare_setattributes_in_battle(u8 buffer, u8 data_request, u8 unkown, u8 data_to_add, void* ptr_to_attribute);
void battlescript_push();
void battlescript_pop();
void battlescript_custom_push(void* ptr_to_push);
void call_bc_move_exec(void* bs_ptr);
void b_std_message(u16 stringID, u8 bank);
u8 gender_from_pid(u16 species, u32 PID);
u8 get_battle_side(u8 bank);
s8 itemid_to_berryid(u16 itemID);
u16 species_to_national_dex(u16 species);
u16 get_height_or_weight(u16 national_dex_index, u8 which_one);
u8 get_bank_turn_order(u8 bank);
u8 count_alive_pokes_on_side(u8 side);
s8 get_poke_flavour_relation(u32 pid, u8 flavour);
void jump_if_cannot_switch_atk4F();
void set_move_effect(u8 a1, u8 a2);
u8 accuracy_helper_function(u16 move);
void jump_if_move_has_no_effect(u8 howmuchtoadd, u16 move);
void record_usage_of_item(u8 bank, u8 item_effect);
u8 get_battle_bank(u8 bank_getter);
void pressure_pp_lose(u8 bank_atk, u8 bank_def, u16 move);
u8 is_poke_disobedient();
u8 uproar_wakeup_check(u8 bank);
void reset_several_turns_stuff(u8 bank);
u8 check_if_imprisioned(u8 bank, u16 move);
u8 get_bank_in_love(u8 arg);
void attack_iteration_cleanup();
void prepare_pokemon_battle_sprite_manipulation_buffer(u8 unknown, u8 unknown2);
u8 check_failure_due_to_status(u8 bank);
void sub_803CEDC(u8 bank1, u8 bank2);
u32 get_attributes(struct pokemon* poke_address, u8 request, void* dst);
void set_attributes(struct pokemon* poke_address, u8 request, void* new_value);
u8 item_is_mail(u8 itemID);
u8 get_lvl_from_exp(struct pokemon*);
u16 teach_move_in_available_slot(struct pokemon* , u16 move);
void new_move_for_the_first(struct pokemon*, u16 move);
u8 get_ai_bank(u8 arg);
void clear_atk_up_if_hit_flag_unless_enraged();
void bc_bs_executer();
void calculate_stats_pokekmon(struct pokemon* poke);
void prepare_battle_animation(u8 bufferID, u8 animID, u16 special_arg);
void refresh_graphics(u8 bank, u8 arg2, u8 objID);
void task_delete(u8 taskID);
void move_anim_task_del(u8 taskID);
void prepare_health_bar_update_buffer(u8 bufferID, s16 hp_change);
char* get_player_name_address();
s8 compare_two_strings(void* string1, void* string2);
char* get_trainername_address(u16 trainerID);
void decompress_battle_healthbar_and_font();
void update_bank_graphical_elements(u8 objID, struct pokemon* poke, u8 element);
void play_sound(u16 songID);
void play_cry(u16 species, u8 param1, u8 param2);
u32 get_item_lastword(u16 itemID);
u8 checkitem(u16 itemID, u16 quantity);
void prepare_fainting_cry(u8 bufferID);
void bx_move_chosing_menu();
s16 get_pingpong(s16 phase, s16 scale);
u8 gpu_pal_tags_index_of(u16 tag);
void set_callback2(void* ptr);
void set_obj_pos(u8 ID, u16 x, u16 y);
void c2_80777E8();
void obj_delete(struct object*);
void update_bank_sprite(u8 bank);
void bank_sprite_sth(u8 bank);
u8 get_poke_ability(struct pokemon* poke);
u8 get_overworld_weather();
u32 get_trainer_money(u16 trainerID);
void give_money(u32* owned_money, u32 to_add);
u8 ai_switch_perish_song();
void prepare_chosen_option(u8 bufferID, u8 optionID, u16 unkown);
u8 ai_switch_sth1();
u8 ai_switch_sth2();
u8 ai_is_statbuffed();
u8 ai_switch_sth3(u8 arg1, u8 arg2);
u32 malloc_and_clear(u16 size);
void free(void* address);
void bbp05_send_out_poke();
void bbl05_set_out_poke();
void bbp06_return_poke_to_pokeball();
void bbo_06_return_poke_to_ball();
void bbp15_open_bag();
void bbp16_open_poke_menu();
void bbp2F_trainer_ball_throw();
u8 b_link_related(u8 switchID, u8 bank);
void load_poke_sprite_deoxys_form(void* sprite_ptr, void* dst, u16 species_no, u32 PiD, enum poke_sprite sprite);
void load_poke_sprite(void* sprite_ptr, void* dst, u16 species_no, u32 PiD, enum poke_sprite sprite);
void* poke_get_pal(u16 species, u32 TiD, u32 PiD);
void LZ77UnCompWram(void* src, void* dst);
void gpu_pal_apply(struct palette* src, u16 index, u16 num_colours);
void* shorten_str_to_10(void* src);
void* str_append(void* dst, void* src);
enum poke_gender poke_get_gender(struct pokemon* poke);
void* sub_8075094(void* string, u16 arg2, u16 arg3, u16 arg4, u8* rboxID);
void sub_8075198(void* ptr, void* pixles, u8 arg3);
void rboxid_08003574(u8 rboxID);
void pal_fade_1(u16 arg1, u16 arg2, u8 arg3, u16 arg4);
void battle_callback1();
void CpuSet(void* src, void* dst, u32 mode);
void poke_update_altitude(u8 bank, u16 species);
u8 b_get_sprite_y(u8 bank);
void prepare_hitanimation(u8 bufferID);
u8 get_bank_identity(u8 bank);
void pal_fade_control_reset_maybe();
u8 fadescreen_related(u32 arg0, u8 arg1, u8 arg2, u8 arg3, u16 arg4);
void quit_recorded_battle();
u8 prepare_party_mail_to_give(struct pokemon* poke, u16 item);
u8 specific_pokerus_check(struct pokemon* poke, u8 caseid);
u8 link_get_multiplayer_id();
void* get_status_text(void* dst);
void fdecoder_for_battle_strings(void* src, void* dst);
u8 get_bank_by_player_ai(u8 id);
void buffer_item(u16 itemID, void* dst);
bool getflag(u16 flagID);
void clearflag(u16 flagID);
void* copy_opponent_a_lose_text();
void* copy_opponent_b_lose_text();
void get_frontier_opponent_battleend_text(u16 trainerID, u8 textID);
void x4000000_get_battle_text(u16 trainerID, u8 textID);
void get_frontier_trainer_name(void* dst, u16 trainerID);
u8 get_secretbase_trainerclass();
u8 get_frontier_opponent_class(u16 trainerID);
u8 get_x4000000_trainerclass(u16 trainerID);
void get_x4000000_trainername(void* dst, u16 trainerID);
u8 get_trainerxC00_trainerclass();
u8 get_x800_trainerclass();
void get_x800_trainername(void* dst);
u8 get_linkpbs_id(u8 bank);
bool is_poke_traded(struct pokemon* poke);
void prepare_exp_receiving(u8 bufferID, u8 pokeID, u16 exp);
void happiness_algorithm(struct pokemon* poke, u8 caseid);
bool consider_creating_wild_poke(void* poke_data, u8 encounter_type, u8 repel_intimidate_check);
u8 not_enough_for_doubles(void);
bool is_in_battle_pyramid(void);
bool is_team_and_pc_full(void);
void item_used_exit_bag(u8 taskID);
void item_used_exit_pyramid_bag(u8 taskID);
void bag_print_msg(u8 taskID, u8 font, void* text, void* return_function);
void pyramid_bag_print_msg(u8 taskID, void* text, void* return_function);
void aftertext_bag(u8 taskID);
void aftertext_pyramid_bag(u8 taskID);
u16 bag_remove_item(u16 itemID, u16 quantity);
enum ball_index itemID_to_ballID(u16 itemID);
enum map_type sav1_get_map_type(void);
u8 get_or_set_pokedex_flags(u16 nationalNO, u8 caseid);
u8 sp86_update_pokemon_quantity(void);
u16 Sqrt(u32 val);
void prepare_ball_throw_anim(u8 bufferID, u8 shakeID);
void update_seen_and_caught_pokemon(u16 nationalNO, u8 caseID, u32 PiD);
u8 generate_pokemon_data_for_player(struct pokemon* poke);
bool sp1E8_is_curr_box_full(void);
u16 get_variable_value(u16 varID);
u8* get_box_name_ptr(u8 boxID);
void rboxes_free(void);
u8 prepare_poke_dex_display(u16 nationalNO, u32 TiD, u32 PiD);
void battle_callback2(void);
void battle_vblank(void);
void sub_80356D0(void);
void load_battletextbox_and_elements(void);
bool sub_8001AD4(void);
u8 gpu_sync_bg_show();
void sub_8056A3C(u8 arg0, u8 arg1, u8 arg2, u8 arg3, u8 arg4);
void sub_8056B74(u8 arg0);
void sub_8056BAC(u8 arg0);
void sub_80A2390(u8 arg0);
void battle_display_rbox(void* text_ptr, u8 flags);
void prepare_string_inserter(u8 caseID, void* text_ptr, u16 species, u8 gender, u32 PiD, void* callback2);
u16 cur_map_get_blockid_at(s16 x_to, s16 y_from);
void obj_change_img_if_possible(struct object*, u8 img_id);
void oac_wild_poke_enters_move_right(struct object*);
void oac_wild_poke_animate_after_fading(struct object*);
void prepare_healthbox_sliding(u8 bank);
void set_healthbox_visible(u8 object);
void poke_restore_pp(struct pokemon*);
bool not_in_battle(void);
void stop_battle_music(void);
void play_song_check_flag(u16 songID);

u32 __udivsi3(u32 numerator, u32 denumerator);
u32 __umodsi3(u32 numerator, u32 denumerator);

#endif /* VANILLA_FUNCTIONS */
